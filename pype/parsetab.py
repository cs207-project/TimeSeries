
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'B7DA2FE6C22431AB95D14A63E4FE0078'
    
_lr_action_items = {'RBRACE':([11,12,14,15,16,27,35,41,43,44,46,50,51,53,54,55,57,],[-28,-27,26,-9,-26,-8,-11,-13,-21,-24,-23,-10,-22,-25,-12,-20,-19,]),'OP_MUL':([13,],[18,]),'STRING':([9,11,12,14,15,16,18,19,21,23,25,27,29,30,31,35,37,38,39,41,42,43,44,45,46,50,51,53,54,55,57,],[11,-28,-27,11,-9,-26,11,11,11,11,11,-8,11,-30,11,-11,11,11,11,-13,11,-21,-24,-29,-23,-10,-22,-25,-12,-20,-19,]),'ASSIGN':([13,],[22,]),'$end':([1,2,3,4,7,8,26,28,],[-1,-5,-4,0,-2,-3,-7,-6,]),'OUTPUT':([13,],[24,]),'IMPORT':([6,],[10,]),'RPAREN':([11,12,16,17,20,24,25,29,30,31,33,34,35,36,37,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,35,41,43,44,-30,46,-15,-17,-11,50,51,53,54,-13,55,-21,-24,-29,-23,-14,-10,-22,57,-25,-12,-20,58,-19,-16,]),'INPUT':([13,],[20,]),'LPAREN':([0,1,2,3,7,8,9,11,12,14,15,16,18,19,20,21,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,53,54,55,57,58,],[6,6,-5,-4,-2,-3,13,-28,-27,13,-9,-26,13,13,32,13,13,32,13,-7,-8,-6,13,-30,13,-15,-17,-11,32,13,13,13,32,-13,13,-21,-24,-29,-23,-14,-10,-22,-25,-12,-20,-19,-16,]),'OP_ADD':([13,],[21,]),'LBRACE':([0,1,2,3,7,8,26,28,],[5,5,-5,-4,-2,-3,-7,-6,]),'NUMBER':([9,11,12,14,15,16,18,19,21,23,25,27,29,30,31,35,37,38,39,41,42,43,44,45,46,50,51,53,54,55,57,],[12,-28,-27,12,-9,-26,12,12,12,12,12,-8,12,-30,12,-11,12,12,12,-13,12,-21,-24,-29,-23,-10,-22,-25,-12,-20,-19,]),'OP_DIV':([13,],[23,]),'OP_SUB':([13,],[19,]),'ID':([5,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,54,55,57,58,],[9,16,17,-28,-27,25,16,-9,-26,16,16,34,16,38,16,34,16,-8,16,-30,16,48,-15,-17,-11,34,16,16,16,34,-13,16,-21,-24,-29,-23,56,-18,-14,-10,-22,-25,-12,-20,-19,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,],[1,]),'type':([32,],[47,]),'component':([0,1,],[2,7,]),'import_statement':([0,1,],[3,8,]),'expression':([9,14,18,19,21,23,25,29,31,37,38,39,42,],[15,27,30,30,30,30,30,45,45,45,52,45,45,]),'program':([0,],[4,]),'declaration':([20,24,36,40,],[33,33,49,49,]),'expression_list':([9,],[14,]),'parameter_list':([18,19,21,23,25,],[29,31,37,39,42,]),'declaration_list':([20,24,],[36,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',12),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',15),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',44),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',45),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',52),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',53),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',60),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',61),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',70),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',71),
  ('type -> ID','type',1,'p_type','parser.py',79),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',83),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_parameter_list','parser.py',87),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_parameter_list','parser.py',88),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',96),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',100),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',104),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',108),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',116),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',120),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',124),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',125),
]
