
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'E1FCB2EDDF1216D4CA039394CC93A7CE'
    
_lr_action_items = {'OP_SUB':([17,],[21,]),'IMPORT':([3,],[9,]),'INPUT':([17,],[23,]),'OP_MUL':([17,],[24,]),'$end':([1,2,4,5,7,8,18,20,],[-1,-5,0,-4,-2,-3,-6,-7,]),'ASSIGN':([17,],[22,]),'RPAREN':([11,14,15,16,23,26,27,29,30,33,34,35,36,37,38,39,40,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,],[18,-26,-27,-28,33,39,41,-30,45,-11,-17,-15,49,51,52,-21,53,-13,54,55,-29,-23,56,-10,-14,-24,-25,-20,-12,-22,-19,58,-16,]),'OUTPUT':([17,],[27,]),'NUMBER':([10,12,13,14,15,16,19,21,24,25,26,28,29,30,31,33,37,38,39,40,41,43,44,45,49,51,52,53,54,55,56,],[15,15,-9,-26,-27,-28,-8,15,15,15,15,15,-30,15,15,-11,15,15,-21,15,-13,15,-29,-23,-10,-24,-25,-20,-12,-22,-19,]),'LBRACE':([0,1,2,5,7,8,18,20,],[6,6,-5,-4,-2,-3,-6,-7,]),'OP_DIV':([17,],[25,]),'STRING':([10,12,13,14,15,16,19,21,24,25,26,28,29,30,31,33,37,38,39,40,41,43,44,45,49,51,52,53,54,55,56,],[16,16,-9,-26,-27,-28,-8,16,16,16,16,16,-30,16,16,-11,16,16,-21,16,-13,16,-29,-23,-10,-24,-25,-20,-12,-22,-19,]),'LPAREN':([0,1,2,5,7,8,10,12,13,14,15,16,18,19,20,21,23,24,25,26,27,28,29,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,49,50,51,52,53,54,55,56,58,],[3,3,-5,-4,-2,-3,17,17,-9,-26,-27,-28,-6,-8,-7,17,32,17,17,17,32,17,-30,17,17,-11,-17,-15,32,17,17,-21,17,-13,32,17,-29,-23,-10,-14,-24,-25,-20,-12,-22,-19,-16,]),'RBRACE':([12,13,14,15,16,19,33,39,41,45,49,51,52,53,54,55,56,],[20,-9,-26,-27,-28,-8,-11,-21,-13,-23,-10,-24,-25,-20,-12,-22,-19,]),'OP_ADD':([17,],[28,]),'ID':([6,9,10,12,13,14,15,16,17,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,47,48,49,50,51,52,53,54,55,56,58,],[10,11,14,14,-9,-26,-27,-28,26,-8,14,31,34,14,14,14,34,14,-30,14,14,47,-11,-17,-15,34,14,14,-21,14,-13,34,14,-29,-23,-18,57,-10,-14,-24,-25,-20,-12,-22,-19,-16,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,],[1,]),'component':([0,1,],[2,7,]),'expression_list':([10,],[12,]),'expression':([10,12,21,24,25,26,28,30,31,37,38,40,43,],[13,19,29,29,29,29,29,44,46,44,44,44,44,]),'parameter_list':([21,24,25,26,28,],[30,37,38,40,43,]),'program':([0,],[4,]),'import_statement':([0,1,],[5,8,]),'declaration':([23,27,36,42,],[35,35,50,50,]),'type':([32,],[48,]),'declaration_list':([23,27,],[36,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',12),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',15),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',44),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',45),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',52),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',53),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',60),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',61),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',70),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',71),
  ('type -> ID','type',1,'p_type','parser.py',79),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',83),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_parameter_list','parser.py',87),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_parameter_list','parser.py',88),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',96),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',100),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',104),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',108),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',116),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',120),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',124),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',125),
]
