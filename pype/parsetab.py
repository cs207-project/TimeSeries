
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'OUTPUT':([11,],[18,]),'OP_MUL':([11,],[20,]),'RBRACE':([12,13,14,15,16,27,33,35,41,47,48,50,51,52,53,54,57,],[-27,26,-9,-28,-26,-8,-13,-21,-11,-12,-20,-24,-23,-25,-10,-22,-19,]),'LPAREN':([0,1,4,6,7,9,10,12,13,14,15,16,18,19,20,21,22,23,24,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,46,47,48,49,50,51,52,53,54,57,58,],[3,-4,3,-5,11,-3,-2,-27,11,-9,-28,-26,29,11,11,11,11,29,11,-7,-8,-6,-15,29,-17,-13,11,-21,-30,11,11,11,29,-11,11,11,-14,-12,-20,-29,-24,-23,-25,-10,-22,-19,-16,]),'NUMBER':([7,12,13,14,15,16,19,20,21,22,24,27,33,34,35,36,37,38,39,41,42,43,47,48,49,50,51,52,53,54,57,],[12,-27,12,-9,-28,-26,12,12,12,12,12,-8,-13,12,-21,-30,12,12,12,-11,12,12,-12,-20,-29,-24,-23,-25,-10,-22,-19,]),'$end':([1,4,5,6,9,10,26,28,],[-4,-1,0,-5,-3,-2,-7,-6,]),'LBRACE':([0,1,4,6,9,10,26,28,],[2,-4,2,-5,-3,-2,-7,-6,]),'OP_ADD':([11,],[24,]),'OP_SUB':([11,],[21,]),'OP_DIV':([11,],[22,]),'INPUT':([11,],[23,]),'STRING':([7,12,13,14,15,16,19,20,21,22,24,27,33,34,35,36,37,38,39,41,42,43,47,48,49,50,51,52,53,54,57,],[15,-27,15,-9,-28,-26,15,15,15,15,15,-8,-13,15,-21,-30,15,15,15,-11,15,15,-12,-20,-29,-24,-23,-25,-10,-22,-19,]),'ID':([2,7,8,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,58,],[7,16,17,19,-27,16,-9,-28,-26,32,16,16,16,16,32,16,43,-8,45,-15,32,-17,-13,16,-21,-30,16,16,16,32,-11,16,16,56,-18,-14,-12,-20,-29,-24,-23,-25,-10,-22,-19,-16,]),'RPAREN':([12,15,16,17,18,19,23,30,31,32,33,34,35,36,37,38,39,40,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,],[-27,-28,-26,28,33,35,41,-15,47,-17,-13,48,-21,-30,50,51,52,53,-11,54,-14,-12,-20,-29,-24,-23,-25,-10,-22,57,58,-19,-16,]),'IMPORT':([3,],[8,]),'ASSIGN':([11,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'import_statement':([0,4,],[1,9,]),'declaration':([18,23,31,40,],[30,30,46,46,]),'type':([29,],[44,]),'statement_list':([0,],[4,]),'program':([0,],[5,]),'parameter_list':([19,20,21,22,24,],[34,37,38,39,42,]),'component':([0,4,],[6,10,]),'declaration_list':([18,23,],[31,40,]),'expression_list':([7,],[13,]),'expression':([7,13,19,20,21,22,24,34,37,38,39,42,43,],[14,27,36,36,36,36,36,49,49,49,49,49,55,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',12),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',15),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',44),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',45),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',52),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',53),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',60),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',61),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',70),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',71),
  ('type -> ID','type',1,'p_type','parser.py',79),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',83),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_parameter_list','parser.py',87),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_parameter_list','parser.py',88),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',96),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',100),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',104),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',108),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',116),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',120),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',124),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',125),
]
