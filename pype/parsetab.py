
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'BA90F0C8CB04659A4089667E76C36B34'
    
_lr_action_items = {'NUMBER':([7,11,12,13,14,15,18,20,21,22,25,27,29,30,31,32,33,34,38,40,42,43,44,45,46,47,50,53,54,55,56,],[13,-9,-26,-27,-28,13,-8,13,13,13,13,13,-30,13,13,-21,13,13,-13,13,-11,13,-29,-25,-23,-20,-12,-24,-10,-22,-19,]),'ASSIGN':([16,],[23,]),'OP_SUB':([16,],[21,]),'RBRACE':([11,12,13,14,15,18,32,38,42,45,46,47,50,53,54,55,56,],[-9,-26,-27,-28,19,-8,-21,-13,-11,-25,-23,-20,-12,-24,-10,-22,-19,]),'$end':([1,2,3,5,8,9,19,28,],[-5,0,-4,-1,-2,-3,-7,-6,]),'ID':([4,7,10,11,12,13,14,15,16,18,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,58,],[7,12,17,-9,-26,-27,-28,12,22,-8,12,12,12,34,37,12,37,12,-30,12,12,-21,12,12,37,-15,-17,-13,52,12,37,-11,12,-29,-25,-23,-20,-14,-12,57,-18,-24,-10,-22,-19,-16,]),'RPAREN':([12,13,14,17,22,24,26,29,30,31,32,33,35,36,37,38,40,41,42,43,44,45,46,47,48,49,50,53,54,55,56,57,58,],[-26,-27,-28,28,32,38,42,-30,45,46,-21,47,50,-15,-17,-13,53,54,-11,55,-29,-25,-23,-20,56,-14,-12,-24,-10,-22,-19,58,-16,]),'LPAREN':([0,1,3,5,7,8,9,11,12,13,14,15,18,19,20,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,40,41,42,43,44,45,46,47,49,50,53,54,55,56,58,],[6,-5,-4,6,16,-2,-3,-9,-26,-27,-28,16,-8,-7,16,16,16,39,16,39,16,-6,-30,16,16,-21,16,16,39,-15,-17,-13,16,39,-11,16,-29,-25,-23,-20,-14,-12,-24,-10,-22,-19,-16,]),'STRING':([7,11,12,13,14,15,18,20,21,22,25,27,29,30,31,32,33,34,38,40,42,43,44,45,46,47,50,53,54,55,56,],[14,-9,-26,-27,-28,14,-8,14,14,14,14,14,-30,14,14,-21,14,14,-13,14,-11,14,-29,-25,-23,-20,-12,-24,-10,-22,-19,]),'OUTPUT':([16,],[24,]),'OP_MUL':([16,],[25,]),'OP_ADD':([16,],[27,]),'LBRACE':([0,1,3,5,8,9,19,28,],[4,-5,-4,4,-2,-3,-7,-6,]),'IMPORT':([6,],[10,]),'OP_DIV':([16,],[20,]),'INPUT':([16,],[26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'component':([0,5,],[1,8,]),'expression':([7,15,20,21,22,25,27,30,31,33,34,40,43,],[11,18,29,29,29,29,29,44,44,44,48,44,44,]),'type':([39,],[51,]),'parameter_list':([20,21,22,25,27,],[30,31,33,40,43,]),'declaration_list':([24,26,],[35,41,]),'declaration':([24,26,35,41,],[36,36,49,49,]),'expression_list':([7,],[15,]),'import_statement':([0,5,],[3,9,]),'program':([0,],[2,]),'statement_list':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',12),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',15),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',44),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',45),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',52),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',53),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',60),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',61),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',70),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',71),
  ('type -> ID','type',1,'p_type','parser.py',79),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',83),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_parameter_list','parser.py',87),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_parameter_list','parser.py',88),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',96),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',100),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',104),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',108),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',116),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',120),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',124),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',125),
]
