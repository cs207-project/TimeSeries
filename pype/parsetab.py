
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = 'D7D1BCF469A7160DABB9E0C3456A50E8'
    
_lr_action_items = {'IMPORT':([5,],[9,]),'NUMBER':([10,12,13,14,15,17,20,22,23,25,26,27,32,34,35,37,38,39,40,41,42,43,45,48,49,50,51,52,54,55,57,],[12,-27,-28,-26,-9,12,12,12,12,12,12,-8,-11,12,-30,-13,12,12,-21,12,12,12,-10,-23,-29,-12,-24,-20,-25,-22,-19,]),'$end':([1,2,3,4,7,8,18,28,],[-1,0,-5,-4,-2,-3,-6,-7,]),'INPUT':([16,],[19,]),'OP_DIV':([16,],[25,]),'OP_MUL':([16,],[22,]),'ID':([6,9,10,12,13,14,15,16,17,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,54,55,57,58,],[10,11,14,-27,-28,-26,-9,23,14,31,14,31,14,14,41,14,14,-8,31,-15,-17,-11,47,14,-30,31,-13,14,14,-21,14,14,14,-14,-10,56,-18,-23,-29,-12,-24,-20,-25,-22,-19,-16,]),'OUTPUT':([16,],[21,]),'LBRACE':([0,1,3,4,7,8,18,28,],[6,6,-5,-4,-2,-3,-6,-7,]),'STRING':([10,12,13,14,15,17,20,22,23,25,26,27,32,34,35,37,38,39,40,41,42,43,45,48,49,50,51,52,54,55,57,],[13,-27,-28,-26,-9,13,13,13,13,13,13,-8,-11,13,-30,-13,13,13,-21,13,13,13,-10,-23,-29,-12,-24,-20,-25,-22,-19,]),'ASSIGN':([16,],[24,]),'OP_ADD':([16,],[26,]),'OP_SUB':([16,],[20,]),'RPAREN':([11,12,13,14,19,21,23,29,30,31,32,34,35,36,37,38,39,40,42,43,44,45,48,49,50,51,52,53,54,55,56,57,58,],[18,-27,-28,-26,32,37,40,45,-15,-17,-11,48,-30,50,-13,51,52,-21,54,55,-14,-10,-23,-29,-12,-24,-20,57,-25,-22,58,-19,-16,]),'LPAREN':([0,1,3,4,7,8,10,12,13,14,15,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,51,52,54,55,57,58,],[5,5,-5,-4,-2,-3,16,-27,-28,-26,-9,16,-6,33,16,33,16,16,16,16,-8,-7,33,-15,-17,-11,16,-30,33,-13,16,16,-21,16,16,16,-14,-10,-23,-29,-12,-24,-20,-25,-22,-19,-16,]),'RBRACE':([12,13,14,15,17,27,32,37,40,45,48,50,51,52,54,55,57,],[-27,-28,-26,-9,28,-8,-11,-13,-21,-10,-23,-12,-24,-20,-25,-22,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,],[1,]),'parameter_list':([20,22,23,25,26,],[34,38,39,42,43,]),'declaration_list':([19,21,],[29,36,]),'declaration':([19,21,29,36,],[30,30,44,44,]),'program':([0,],[2,]),'type':([33,],[46,]),'component':([0,1,],[3,7,]),'import_statement':([0,1,],[4,8,]),'expression':([10,17,20,22,23,25,26,34,38,39,41,42,43,],[15,27,35,35,35,35,35,49,49,49,53,49,49,]),'expression_list':([10,],[17,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',12),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',15),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',44),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',45),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',52),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',53),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',60),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',61),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',70),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',71),
  ('type -> ID','type',1,'p_type','parser.py',79),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',83),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_parameter_list','parser.py',87),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_parameter_list','parser.py',88),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',96),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',100),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',104),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',108),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',116),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',120),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',124),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',125),
]
