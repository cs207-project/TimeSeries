
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '55C53B9434ED5FC68BBE31AE8D09ED67'
    
_lr_action_items = {'RBRACE':([11,12,13,14,16,19,33,38,41,44,47,51,52,53,54,55,57,],[-28,-27,18,-26,-9,-8,-11,-13,-21,-23,-10,-12,-22,-24,-20,-25,-19,]),'INPUT':([15,],[21,]),'OP_SUB':([15,],[20,]),'RPAREN':([11,12,14,17,21,23,26,29,30,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,50,51,52,53,54,55,56,57,58,],[-28,-27,-26,28,33,38,41,-30,44,-15,-17,-11,47,51,-13,52,53,-21,54,55,-23,-29,-14,-10,57,-12,-22,-24,-20,-25,58,-19,-16,]),'ASSIGN':([15,],[22,]),'STRING':([9,11,12,13,14,16,19,20,24,25,26,27,29,30,33,36,38,39,40,41,42,43,44,45,47,51,52,53,54,55,57,],[11,-28,-27,11,-26,-9,-8,11,11,11,11,11,-30,11,-11,11,-13,11,11,-21,11,11,-23,-29,-10,-12,-22,-24,-20,-25,-19,]),'$end':([1,2,5,6,7,8,18,28,],[-1,-4,-5,0,-3,-2,-7,-6,]),'OP_ADD':([15,],[24,]),'OP_MUL':([15,],[25,]),'IMPORT':([4,],[10,]),'ID':([3,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,57,58,],[9,14,17,-28,-27,14,-26,26,-9,-8,14,32,36,32,14,14,14,14,-30,14,-15,-17,-11,32,49,14,32,-13,14,14,-21,14,14,-23,-29,-14,-10,56,-18,-12,-22,-24,-20,-25,-19,-16,]),'LPAREN':([0,1,2,5,7,8,9,11,12,13,14,16,18,19,20,21,23,24,25,26,27,28,29,30,31,32,33,34,36,37,38,39,40,41,42,43,44,45,46,47,51,52,53,54,55,57,58,],[4,4,-4,-5,-3,-2,15,-28,-27,15,-26,-9,-7,-8,15,35,35,15,15,15,15,-6,-30,15,-15,-17,-11,35,15,35,-13,15,15,-21,15,15,-23,-29,-14,-10,-12,-22,-24,-20,-25,-19,-16,]),'OUTPUT':([15,],[23,]),'OP_DIV':([15,],[27,]),'LBRACE':([0,1,2,5,7,8,18,28,],[3,3,-4,-5,-3,-2,-7,-6,]),'NUMBER':([9,11,12,13,14,16,19,20,24,25,26,27,29,30,33,36,38,39,40,41,42,43,44,45,47,51,52,53,54,55,57,],[12,-28,-27,12,-26,-9,-8,12,12,12,12,12,-30,12,-11,12,-13,12,12,-21,12,12,-23,-29,-10,-12,-22,-24,-20,-25,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,],[1,]),'import_statement':([0,1,],[2,7,]),'declaration':([21,23,34,37,],[31,31,46,46,]),'declaration_list':([21,23,],[34,37,]),'expression':([9,13,20,24,25,26,27,30,36,39,40,42,43,],[16,19,29,29,29,29,29,45,50,45,45,45,45,]),'parameter_list':([20,24,25,26,27,],[30,39,40,42,43,]),'expression_list':([9,],[13,]),'type':([35,],[48,]),'component':([0,1,],[5,8,]),'program':([0,],[6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','parser.py',7),
  ('statement_list -> statement_list component','statement_list',2,'p_statement_list','parser.py',12),
  ('statement_list -> statement_list import_statement','statement_list',2,'p_statement_list','parser.py',13),
  ('statement_list -> import_statement','statement_list',1,'p_statement_list','parser.py',14),
  ('statement_list -> component','statement_list',1,'p_statement_list','parser.py',15),
  ('import_statement -> LPAREN IMPORT ID RPAREN','import_statement',4,'p_import_statement','parser.py',26),
  ('component -> LBRACE ID expression_list RBRACE','component',4,'p_component','parser.py',30),
  ('expression_list -> expression_list expression','expression_list',2,'p_expression_list','parser.py',34),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',35),
  ('expression -> LPAREN INPUT declaration_list RPAREN','expression',4,'p_expression_input','parser.py',44),
  ('expression -> LPAREN INPUT RPAREN','expression',3,'p_expression_input','parser.py',45),
  ('expression -> LPAREN OUTPUT declaration_list RPAREN','expression',4,'p_expression_output','parser.py',52),
  ('expression -> LPAREN OUTPUT RPAREN','expression',3,'p_expression_output','parser.py',53),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',60),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',61),
  ('declaration -> LPAREN type ID RPAREN','declaration',4,'p_declaration','parser.py',70),
  ('declaration -> ID','declaration',1,'p_declaration','parser.py',71),
  ('type -> ID','type',1,'p_type','parser.py',79),
  ('expression -> LPAREN ASSIGN ID expression RPAREN','expression',5,'p_expression_assign','parser.py',83),
  ('expression -> LPAREN ID parameter_list RPAREN','expression',4,'p_expression_parameter_list','parser.py',87),
  ('expression -> LPAREN ID RPAREN','expression',3,'p_expression_parameter_list','parser.py',88),
  ('expression -> LPAREN OP_ADD parameter_list RPAREN','expression',4,'p_op_add_expression','parser.py',96),
  ('expression -> LPAREN OP_SUB parameter_list RPAREN','expression',4,'p_op_sub_expression','parser.py',100),
  ('expression -> LPAREN OP_MUL parameter_list RPAREN','expression',4,'p_op_mul_expression','parser.py',104),
  ('expression -> LPAREN OP_DIV parameter_list RPAREN','expression',4,'p_op_div_expression','parser.py',108),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',112),
  ('expression -> NUMBER','expression',1,'p_expression_num','parser.py',116),
  ('expression -> STRING','expression',1,'p_expression_str','parser.py',120),
  ('parameter_list -> parameter_list expression','parameter_list',2,'p_parameter_list','parser.py',124),
  ('parameter_list -> expression','parameter_list',1,'p_parameter_list','parser.py',125),
]
